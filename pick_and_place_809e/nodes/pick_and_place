#!/usr/bin/env python

# ros
from manipulation_809e import manipulation_class
from navigation_809e import navigation_class
import rospy
import copy
import tf2_ros
from geometry_msgs.msg import TransformStamped, Pose
from geometry_msgs.msg import PoseWithCovarianceStamped, Quaternion, Point
from geometry_msgs.msg import Twist

class MobileManipulation():
    """
    A class for mobile manipulation
    """

    def __init__(self):
        rospy.init_node('pick_and_place', anonymous=True)
        rospy.Subscriber("robot/amcl_pose", PoseWithCovarianceStamped, self.amcl_callback)
        self._cmd_vel_pub = rospy.Publisher('/robot/move_base/cmd_vel', Twist, queue_size=10)
        self._manipulation = manipulation_class.MoveitKairos(ns='/robot')
        self._navigation = navigation_class.Navigation()
        self._mobile_base_position = Point()
        self._mobile_base_orientation = Quaternion()

    @property
    def manipulation(self):
        return self._manipulation
    
    @property
    def navigation(self):
        return self._navigation

    @property
    def mobile_base_position(self):
        return self._mobile_base_position
    
    @property
    def mobile_base_orientation(self):
        return self._mobile_base_orientation
    
    def cmd_vel_to(self, linear_x, linear_y, angular_z):
        msg_twist = Twist()
        msg_twist.linear.x = linear_x
        msg_twist.linear.y = linear_y
        msg_twist.angular.z = angular_z
        self._cmd_vel_pub.publish(msg_twist)

    def get_transform(self, source, target):
        tf_buffer = tf2_ros.Buffer(rospy.Duration(3.0))
        tf2_ros.TransformListener(tf_buffer)

        transform_stamped = TransformStamped()
        # Get the transform between robot_map and robot_arm_tool0

        for _ in range(5):
            try:
                transform_stamped = tf_buffer.lookup_transform(
                    source,
                    target, 
                    rospy.Time(), 
                    rospy.Duration(1.0))
            except (tf2_ros.LookupException,
                    tf2_ros.ConnectivityException,
                    tf2_ros.ExtrapolationException):
                rospy.logerr("Unable to lookup transform")

        pose = Pose()
        pose.position = transform_stamped.transform.translation
        pose.orientation = transform_stamped.transform.rotation
        return pose

    def get_gripper_pose_in_frame(self, frame):
        tf_buffer = tf2_ros.Buffer(rospy.Duration(3.0))
        tf2_ros.TransformListener(tf_buffer)

        transform_stamped = TransformStamped()
        # Get the transform between robot_map and robot_arm_tool0

        for _ in range(5):
            try:
                transform_stamped = tf_buffer.lookup_transform(
                    frame,
                    'robot_arm_tool0', 
                    rospy.Time(), 
                    rospy.Duration(1.0))
            except (tf2_ros.LookupException,
                    tf2_ros.ConnectivityException,
                    tf2_ros.ExtrapolationException):
                rospy.logerr("Unable to lookup transform")

        gripper_pose = Pose()
        gripper_pose.position = transform_stamped.transform.translation
        gripper_pose.orientation = transform_stamped.transform.rotation
        return gripper_pose

    def amcl_callback(self, msg):
        # rospy.loginfo("getting robot pose")
        
        self._mobile_base_position  = msg.pose.pose.position
        # rospy.loginfo(self._mobile_base_position.x)
        # rospy.loginfo(self._mobile_base_position.y)
        self._mobile_base_orientation  = msg.pose.pose.orientation


def main():
    mobile_manipulation = MobileManipulation()
    mobile_manipulation.manipulation.close_gripper()
    rospy.sleep(2.0)
    mobile_manipulation.manipulation.goto_preset_location("home")

    part_pose = [-1.093374, 4.087609, 0.829555, 0, 0, 0]
    kairos_arm_group = mobile_manipulation.manipulation.groups['ur5_arm']

    # end effector is sent in the robot_base_footprint frame
    rospy.loginfo(kairos_arm_group.get_planning_frame())
    kairos_arm_group.set_goal_orientation_tolerance = 0.005
    kairos_arm_group.set_goal_position_tolerance = 0.005

    
    # kairos_joints = kairos_arm.get_current_joint_values()
    # ee_pose = kairos_arm_group.get_current_pose().pose
    # kairos_arm.set_joint_value_target(ee_pose)
    # kairos_arm.go()
    # rospy.sleep(0.5)

    # manipulation.open_gripper()
    # manipulation.close_gripper()


    mobile_manipulation.navigation.move_to(goal_x=None,
                       goal_y=None,
                       orientation=None,
                       spot="pre_table2")
    mobile_manipulation.manipulation.goto_preset_location("table2_grasp")
    rospy.sleep(2.0)

    # align the gripper with the part by moving the moving base
    # after extending the arm, get the transform between the arm and the mobile base
    # then move the mobile base so that the arm is at x y of the part
    # mobile_manipulation.navigation.move_to(goal_x=None,
    #                    goal_y=None,
    #                    orientation=None,
    #                    spot="table2")
    gripper_map_pose = mobile_manipulation.get_gripper_pose_in_frame("robot_map")
    print("gripper_map_pose_x", gripper_map_pose.position.x)

    # get the pose of the gripper relative to robot_base_footprint
    gripper_robot_pose = mobile_manipulation.get_gripper_pose_in_frame("robot_base_footprint")
    # print("gripper_robot_pose_x", gripper_robot_pose.position.x)
    
    delta_gripper_robot_x = abs(gripper_robot_pose.position.x)
    delta_gripper_robot_y = abs(gripper_robot_pose.position.y)
    print("delta_gripper_robot_x", delta_gripper_robot_x)

    delta_gripper_part_x = abs(gripper_map_pose.position.x) - abs(part_pose[0])
    print("delta_gripper_part_x", delta_gripper_part_x)
    delta_gripper_part_y = abs(gripper_map_pose.position.y) - abs(part_pose[1])

    robot_current_pose =  mobile_manipulation.get_transform(source="robot_map", target="robot_base_footprint")
    delta_base_part_x = abs(robot_current_pose.position.x)-abs(part_pose[0])
    delta_base_part_y = abs(robot_current_pose.position.y)-abs(part_pose[1])
    print("delta_base_part_x", delta_base_part_x)

    distance_to_drive_x = delta_base_part_x - delta_gripper_robot_x
    distance_to_drive_y = delta_base_part_y - delta_gripper_robot_y
    print("distance to drive", distance_to_drive_x)

    
    print("current_robot_x", robot_current_pose.position.x)
    robot_goal_x = robot_current_pose.position.x + distance_to_drive_x
    robot_goal_y = robot_current_pose.position.y - distance_to_drive_y
    print("robot_goal_x", robot_goal_x)
    
    mobile_manipulation.navigation.move_to(robot_goal_x, 
        robot_goal_y, 
        robot_current_pose.orientation)

    # --------------------
    # delta_x = gripper_map_pose.position.x - part_pose[0]
    # delta_y = gripper_map_pose.position.y - part_pose[1]
    # # rospy.loginfo(delta_x)
    # # rospy.loginfo(delta_y)
    # # rospy.loginfo(mobile_manipulation.mobile_base_position.x - delta_x)
    # # rospy.loginfo(mobile_manipulation.mobile_base_position.y - delta_y)

    # rate = rospy.Rate(10)
    # rospy.loginfo("Moving along x-axis")
    # while abs(delta_x > 0.01):
    #     gripper_map_pose = mobile_manipulation.get_gripper_map_pose()
    #     delta_x = gripper_map_pose.position.x - part_pose[0]
    #     # delta_y = gripper_map_pose.position.y - part_pose[1]
    #     print("gripper_position_x: ", gripper_map_pose.position.x)
    #     print("delta_x: ", delta_x)
    #     # rospy.loginfo(delta_y)
    #     if delta_x < 0:
    #         mobile_manipulation.cmd_vel_to(0.01,0,0)
    #     else:
    #         mobile_manipulation.cmd_vel_to(-0.01,0,0)
    #     rate.sleep()
    
    # rospy.loginfo("Stop robot")
    # mobile_manipulation.cmd_vel_to(0,0,0)

    # rospy.loginfo("Moving along y-axis")
    # while abs(delta_y > 0.01):
    #     gripper_map_pose = mobile_manipulation.get_gripper_map_pose()
    #     delta_y = gripper_map_pose.position.y - part_pose[1]
    #     # delta_y = gripper_map_pose.position.y - part_pose[1]
    #     print("gripper_position_y: ", gripper_map_pose.position.y)
    #     print("delta_y: ", delta_y)
    #     # rospy.loginfo(delta_y)
    #     if delta_y < 0:
    #         mobile_manipulation.cmd_vel_to(0,-0.01,0)
    #     else:
    #         mobile_manipulation.cmd_vel_to(0, 0.01, 0)
    #     rate.sleep()

    # # rospy.sleep(10.0)
    # # mobile_manipulation.cmd_vel_to(mobile_manipulation.mobile_base_position.x + delta_x,
    # # mobile_manipulation.mobile_base_position.y + delta_y,
    # # 0)
    # # mobile_manipulation.navigation.move_to(mobile_manipulation.mobile_base_position.x - delta_x, 
    # # mobile_manipulation.mobile_base_position.y - delta_y, 
    # # mobile_manipulation.mobile_base_orientation)
    


    

    # gripper_map_pose = get_gripper_map_pose()
    
    # gripper_map_pose.position.x = part_pose[0]
    # gripper_map_pose.position.y = part_pose[1] + 0.02
    # gripper_map_pose.position.z = part_pose[2] + 0.25
    # gripper_map_pose.orientation.x = 0.009
    # gripper_map_pose.orientation.y = 1
    # gripper_map_pose.orientation.z = 0.003
    # gripper_map_pose.orientation.w = -0.025
    # kairos_arm.set_pose_reference_frame("robot_map")
    # kairos_arm.set_pose_target(gripper_map_pose)
    # kairos_arm.go()
    # rospy.loginfo(gripper_map_pose)

    
    # # Motions to grasp the part
    # manipulation.open_gripper()
    # rospy.sleep(5)
    
    # # Get the current pose of the gripper
    # gripper_map_pose = get_gripper_map_pose()
    
    # # pre-grasp pose
    # near_pick_pose = copy.deepcopy(gripper_map_pose)
    # near_pick_pose.position.z = gripper_map_pose.position.z - 0.05
    # # grasp pose
    # pick_pose = copy.deepcopy(gripper_map_pose)
    # pick_pose.position.z = gripper_map_pose.position.z - 0.09
    # path = [near_pick_pose, pick_pose]
    
    # manipulation.cartesian_move(kairos_arm, path)
    # rospy.sleep(5)
    # manipulation.close_gripper()
    # rospy.loginfo(gripper_map_pose)
    


if __name__ == '__main__':
    # while not rospy.is_shutdown():
    main()
    rospy.spin()
